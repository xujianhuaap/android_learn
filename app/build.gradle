import com.skullmind.io.tasks.FirstTask
apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.skullmind.io.plugins.DemoPlugin'

android {
    compileSdkVersion  versions.compileSdk
    buildToolsVersion  versions.buildTools
    defaultConfig {
        applicationId "com.skullmind.io"
        minSdkVersion  versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
    dataBinding {
        enabled = true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation libraries.kotlin
    implementation libraries.kotlin_reflect
    implementation libraries.kotlin_coroutines
    implementation libraries.dagger
    implementation libraries.daggerSupport
    kapt libraries.daggerAndroidApt
    kapt libraries.daggerProcessor

    implementation  libraries.butterKnife
    kapt libraries.butterKnifeProcessor

    implementation  libraries.retrofit
    implementation  libraries.retrofit_gson
    implementation libraries.adapter_rxjava
    implementation libraries.rxandroid

    implementation libraries.appcompat_v7
    implementation libraries.constraint_layout
    implementation  libraries.recycler_view
    implementation libraries.lifecycle
    implementation libraries.ktx
    implementation libraries.work_manager



    testImplementation libraries.junit
    testImplementation libraries.mock_core
    testImplementation libraries.power_mock_junit
    testImplementation libraries.power_mock_junit_rule
    testImplementation libraries.power_mock_api
    testImplementation libraries.power_mock_classloading
    testImplementation libraries.robolectric
    testImplementation libraries.test_core
    androidTestImplementation libraries.android_test_runner
    androidTestImplementation libraries.espresso_core

    //androidx
    implementation libraries.security_cryto
}

afterEvaluate {
    tasks.matching {Task task -> task.name == "printDependencies"}.forEach({
        Task t ->
            println("app after evaluate")
            t.dependsOn(tasks.getByName("clean"))
    })
}

task printDependencies(type:Copy){
    println("=== print dependencies ===")
    from "${rootProject.projectDir}/settings.gradle"
    into "${rootProject.projectDir}/temp/"
}

//task firstTask(type:FirstTask){
//
//}